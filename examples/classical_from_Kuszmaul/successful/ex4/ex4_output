Hennings-MacBook-Pro:classical_from_Kuszmaul ulfarsson$ python ex4.py
[2016-09-20 14:25:07.605069] Generating permutations from input
[2016-09-20 14:25:09.205994] Finished in 1.601s
[2016-09-20 14:25:09.206034] Enumeration is [1, 1, 2, 6, 14, 22, 35, 54]
[2016-09-20 14:25:09.206063] Tayloring DAG
[2016-09-20 14:25:17.382282] Finished in 8.176s
[2016-09-20 14:25:17.383058] (0, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383080] (1, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1]])')
[2016-09-20 14:25:17.383092] (2, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 14:25:17.383103] (3, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3]])')
[2016-09-20 14:25:17.383115] (4, 'Av([[1, 2, 3], [1, 3, 2], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383126] (5, 'Av([[1, 2, 3], [1, 3, 2], [2, 3, 1], [4, 2, 1, 3]])')
[2016-09-20 14:25:17.383136] (6, 'Av([[1, 2, 3], [1, 3, 2], [3, 1, 2]])')
[2016-09-20 14:25:17.383147] (7, 'Av([[1, 2, 3], [1, 3, 2], [4, 2, 1, 3]])')
[2016-09-20 14:25:17.383158] (8, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383169] (9, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 3, 2]])')
[2016-09-20 14:25:17.383180] (10, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383192] (11, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1], [4, 1, 3, 2]])')
[2016-09-20 14:25:17.383203] (12, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 4, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383214] (13, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 4, 3], [2, 3, 1], [4, 1, 3, 2], [4, 2, 1, 3]])')
[2016-09-20 14:25:17.383225] (14, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 4, 3], [2, 4, 3, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383236] (15, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 4, 3], [2, 4, 3, 1], [3, 1, 4, 2], [4, 1, 3, 2], [4, 2, 1, 3]])')
[2016-09-20 14:25:17.383247] (16, 'Av([[1, 2]])')
[2016-09-20 14:25:17.383258] (17, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 14:25:17.383269] (18, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383280] (19, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 14:25:17.383290] (20, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 2, 3]])')
[2016-09-20 14:25:17.383302] (21, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 4, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 14:25:17.383313] (22, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 4, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383323] (23, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 4, 1], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 14:25:17.383334] (24, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 4, 1], [4, 1, 2, 3]])')
[2016-09-20 14:25:17.383346] (25, 'Av([[1, 3, 2], [2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 14:25:17.383356] (26, 'Av([[1, 3, 2], [2, 3, 1], [3, 1, 2, 4], [4, 1, 2, 3], [4, 2, 1, 3]])')
[2016-09-20 14:25:17.383367] (27, 'Av([[1, 3, 2], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 14:25:17.383378] (28, 'Av([[1, 3, 2], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383390] (29, 'Av([[1, 3, 2], [2, 3, 4, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 14:25:17.383401] (30, 'Av([[1, 3, 2], [2, 3, 4, 1], [3, 1, 2, 4], [4, 1, 2, 3], [4, 2, 1, 3]])')
[2016-09-20 14:25:17.383412] (31, 'Av([[1, 3, 2], [2, 3, 4, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 14:25:17.383422] (32, 'Av([[1, 3, 2], [2, 3, 4, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383434] (33, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 1, 3], [2, 3, 4, 1], [2, 4, 3, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383445] (34, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 1, 3], [2, 3, 4, 1], [2, 4, 3, 1], [4, 1, 2, 3], [4, 1, 3, 2]])')
[2016-09-20 14:25:17.383457] (35, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 1, 4, 3], [2, 3, 4, 1], [2, 4, 3, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383467] (36, 'Av([[1, 3, 4, 2], [2, 1, 3], [2, 3, 4, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 14:25:17.383479] (37, 'Av([[1, 3, 4, 2], [2, 1, 3], [2, 3, 4, 1], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 14:25:17.383490] (38, 'Av([[1, 3, 4, 2], [2, 1, 4, 3], [2, 3, 4, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 14:25:17.383501] (39, 'Av([[1, 3, 4, 2], [2, 1, 4, 3], [2, 3, 4, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 14:25:17.383512] (40, 'Av([[1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383524] (41, 'Av([[1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 2, 3], [4, 1, 3, 2]])')
[2016-09-20 14:25:17.383535] (42, 'Av([[1, 4, 3, 2], [2, 1, 4, 3], [2, 3, 1], [3, 1, 2, 4], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3]])')
[2016-09-20 14:25:17.383546] (43, 'Av([[1, 4, 3, 2], [2, 1, 4, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 14:25:17.383556] (44, 'Av([[2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 14:25:17.383568] (45, 'Av([[2, 1, 3], [2, 3, 1], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 14:25:17.383578] (46, 'Av([[2, 1, 4, 3], [2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 14:25:17.383589] (47, 'Av([[2, 1, 4, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 14:25:17.383599] (48, 'Av([[2, 1]])')
[2016-09-20 14:25:17.383611] (49, 'input permutation set')
[2016-09-20 14:25:17.383622] (50, 'point permutation set')
[2016-09-20 14:25:17.383632] (51, 'None')
[2016-09-20 14:25:17.384308] Generating rules
[2016-09-20 14:25:17.384324] Generate allowed neighbors, overlap
[2016-09-20 14:25:24.040060] Generate allowed neighbors, perm prop
[2016-09-20 14:25:47.271876] Generating point rules
[2016-09-20 14:25:47.271946] Cell (4,4)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.272766] Cell (4,3)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.274231] Cell (4,2)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.276763] Cell (4,1)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.282969] Cell (4,0)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.297032] Cell (3,4)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.318646] Cell (3,3)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.355690] Cell (3,2)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.399158] Cell (3,1)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.459543] Cell (3,0)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.545218] Cell (2,4)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.637791] Cell (2,3)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.763002] Cell (2,2)
100% [##################################################]  00:00:00
[2016-09-20 14:25:47.908970] Cell (2,1)
100% [##################################################]  00:00:00
[2016-09-20 14:25:48.091446] Cell (2,0)
100% [##################################################]  00:00:00
[2016-09-20 14:25:48.319820] Cell (1,4)
100% [##################################################]  00:00:00
[2016-09-20 14:25:48.491706] Cell (1,3)
100% [##################################################]  00:00:00
[2016-09-20 14:25:48.694692] Cell (1,2)
100% [##################################################]  00:00:00
[2016-09-20 14:25:48.919973] Cell (1,1)
100% [##################################################]  00:00:00
[2016-09-20 14:25:49.187857] Cell (1,0)
100% [##################################################]  00:00:00
[2016-09-20 14:25:49.501767] Cell (0,4)
100% [##################################################]  00:00:00
[2016-09-20 14:25:49.664952] Cell (0,3)
100% [##################################################]  00:00:00
[2016-09-20 14:25:49.827801] Cell (0,2)
100% [##################################################]  00:00:00
[2016-09-20 14:25:49.983654] Cell (0,1)
100% [##################################################]  00:00:00
[2016-09-20 14:25:50.149019] Cell (0,0)
100% [##################################################]  00:00:00
[2016-09-20 14:25:50.323786] Generating rules, 6 iterations
[2016-09-20 14:25:50.323827] Iteration 1
100% [##################################################]  00:00:02
[2016-09-20 14:25:52.368771] Iteration 2
100% [##################################################]  00:00:11
[2016-09-20 14:26:03.473100] Iteration 3
100% [##################################################]  00:00:22
[2016-09-20 14:26:25.954084] Iteration 4
100% [##################################################]  00:01:22
[2016-09-20 14:27:48.473166] Iteration 5
100% [##################################################]  00:00:12
[2016-09-20 14:28:01.113925] Iteration 6
100% [##################################################]  00:00:00
[2016-09-20 14:28:01.122296] Found 6163 rules, 1657 of which are valid, 1135 of which are distinct
[2016-09-20 14:28:01.122322] Death by overlap: 2912
[2016-09-20 14:28:01.122333] Death by perm prop: 1594
[2016-09-20 14:28:01.122342]
[2016-09-20 14:28:01.122569] Finding exact cover...
[2016-09-20 14:28:01.122604] Found:

Gurobi Optimizer version 6.5.0 build v6.5.0rc1 (mac64)
Copyright (c) 2015, Gurobi Optimization, Inc.

Read LP format model from file /var/folders/5c/0g9v9k4x76gcq3btks74_jpw0000gn/T/struct_tmpLSK0gf/inp.lp
Reading time = 0.01 seconds
(null): 135 rows, 1135 columns, 15905 nonzeros
Optimize a model with 135 rows, 1135 columns and 15905 nonzeros
Coefficient statistics:
  Matrix range    [1e+00, 1e+00]
  Objective range [1e+00, 1e+00]
  Bounds range    [1e+00, 1e+00]
  RHS range       [1e+00, 1e+00]
Found heuristic solution: objective 4
Presolve removed 63 rows and 861 columns
Presolve time: 0.08s
Presolved: 72 rows, 274 columns, 2479 nonzeros
Variable types: 0 continuous, 274 integer (274 binary)

Root relaxation: cutoff, 20 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0     cutoff    0         4.00000    3.00001  25.0%     -    0s

Explored 0 nodes (20 simplex iterations) in 0.09 seconds
Thread count was 8 (of 8 available processors)

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0%

Wrote result file '/var/folders/5c/0g9v9k4x76gcq3btks74_jpw0000gn/T/struct_tmpLSK0gf/out.sol'

[71, 72, 692, 871]

[2016-09-20 14:28:01.305266] Index:
 71:
111111111111111111111111111111111111111111111110000001111111111111111111111111111110000011111111111111111100001111111101100011111011111

+-+
|1|
+-+
1: Av([[1, 3, 2], [2, 3, 4, 1], [3, 1, 2, 4], [4, 1, 2, 3], [4, 2, 1, 3]])

 72:
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000

+-+-+-+-+
| |o| | |
+-+-+-+-+
| | | |o|
+-+-+-+-+
|o| | | |
+-+-+-+-+
| | |o| |
+-+-+-+-+

692:
000000000000000000000000000000000000000000000001110110000000000000000000000000000001101100000000000000000010110000000000001100000100000

+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av([[2, 1]])

+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
1: Av([[2, 1]])

871:
000000000000000000000000000000000000000000000000001000000000000000000000000000000000010000000000000000000001000000000000010000000000000

+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av([[2, 1]])

+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
1: Av([[2, 1]])

[2016-09-20 14:28:01.306570] Verifying cover [71, 72, 692, 871] up to length 10
[2016-09-20 14:28:01.306597] Multiple covers, but only using one for verification
[2016-09-20 14:28:25.801350] Cover verified up to length 10
