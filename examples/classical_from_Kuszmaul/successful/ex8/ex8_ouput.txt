Hennings-MacBook-Pro:classical_from_Kuszmaul ulfarsson$ python ex8.py
[2016-09-20 14:59:59.122515] Generating permutations from input
[2016-09-20 15:00:00.571089] Finished in 1.448s
[2016-09-20 15:00:00.571130] Enumeration is [1, 1, 2, 6, 15, 23, 37, 59]
[2016-09-20 15:00:00.571158] Tayloring DAG
[2016-09-20 15:00:08.330308] Finished in 7.759s
[2016-09-20 15:00:08.331005] (0, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 15:00:08.331034] (1, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1]])')
[2016-09-20 15:00:08.331046] (2, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 15:00:08.331058] (3, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3]])')
[2016-09-20 15:00:08.331069] (4, 'Av([[1, 2, 3], [1, 3, 2], [2, 3, 1], [3, 1, 2], [3, 2, 1, 4]])')
[2016-09-20 15:00:08.331099] (5, 'Av([[1, 2, 3], [1, 3, 2], [2, 3, 1], [3, 2, 1, 4], [4, 2, 1, 3]])')
[2016-09-20 15:00:08.331110] (6, 'Av([[1, 2, 3], [1, 3, 2], [3, 1, 2], [3, 2, 1, 4]])')
[2016-09-20 15:00:08.331121] (7, 'Av([[1, 2, 3], [1, 3, 2], [3, 2, 1, 4], [4, 2, 1, 3]])')
[2016-09-20 15:00:08.331132] (8, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 15:00:08.331142] (9, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 3, 1]])')
[2016-09-20 15:00:08.331153] (10, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1], [3, 1, 2]])')
[2016-09-20 15:00:08.331165] (11, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1]])')
[2016-09-20 15:00:08.331176] (12, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 4, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1, 4]])')
[2016-09-20 15:00:08.331188] (13, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 4, 3], [2, 3, 1], [3, 2, 1, 4], [4, 2, 1, 3]])')
[2016-09-20 15:00:08.331199] (14, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 4, 3], [2, 4, 3, 1], [3, 1, 2], [3, 2, 1, 4]])')
[2016-09-20 15:00:08.331211] (15, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 4, 3], [2, 4, 3, 1], [3, 2, 1, 4], [4, 2, 1, 3]])')
[2016-09-20 15:00:08.331222] (16, 'Av([[1, 2]])')
[2016-09-20 15:00:08.331233] (17, 'Av([[1, 3, 2], [2, 1, 3, 4], [2, 3, 1], [3, 1, 2, 4], [3, 2, 1, 4], [4, 1, 2, 3], [4, 2, 1, 3]])')
[2016-09-20 15:00:08.331244] (18, 'Av([[1, 3, 2], [2, 1, 3, 4], [2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 15:00:08.331255] (19, 'Av([[1, 3, 2], [2, 1, 3, 4], [2, 3, 1], [3, 1, 2], [3, 2, 1, 4]])')
[2016-09-20 15:00:08.331266] (20, 'Av([[1, 3, 2], [2, 1, 3, 4], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 15:00:08.331276] (21, 'Av([[1, 3, 2], [2, 1, 3, 4], [3, 1, 2, 4], [3, 2, 1, 4], [4, 1, 2, 3], [4, 2, 1, 3]])')
[2016-09-20 15:00:08.331287] (22, 'Av([[1, 3, 2], [2, 1, 3, 4], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 15:00:08.331298] (23, 'Av([[1, 3, 2], [2, 1, 3, 4], [3, 1, 2], [3, 2, 1, 4]])')
[2016-09-20 15:00:08.331309] (24, 'Av([[1, 3, 2], [2, 1, 3, 4], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 15:00:08.331320] (25, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 15:00:08.331331] (26, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 15:00:08.331341] (27, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 15:00:08.331353] (28, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 2, 3]])')
[2016-09-20 15:00:08.331363] (29, 'Av([[1, 3, 2], [2, 1, 3], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 15:00:08.331374] (30, 'Av([[1, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 15:00:08.331385] (31, 'Av([[1, 3, 2], [2, 1, 3], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 15:00:08.331396] (32, 'Av([[1, 3, 2], [2, 1, 3], [4, 1, 2, 3]])')
[2016-09-20 15:00:08.331407] (33, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 4, 3, 1], [3, 1, 2], [3, 2, 1, 4]])')
[2016-09-20 15:00:08.331418] (34, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1], [3, 1, 2]])')
[2016-09-20 15:00:08.331429] (35, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1], [4, 1, 2, 3]])')
[2016-09-20 15:00:08.331440] (36, 'Av([[1, 3, 4, 2], [2, 1, 3, 4], [2, 1, 4, 3], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 15:00:08.331451] (37, 'Av([[1, 3, 4, 2], [2, 1, 3, 4], [2, 1, 4, 3], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 15:00:08.331462] (38, 'Av([[1, 3, 4, 2], [2, 1, 3], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 15:00:08.331473] (39, 'Av([[1, 3, 4, 2], [2, 1, 3], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 15:00:08.331484] (40, 'Av([[1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1], [3, 1, 2, 4], [3, 2, 1, 4], [4, 1, 2, 3], [4, 2, 1, 3]])')
[2016-09-20 15:00:08.331495] (41, 'Av([[1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1, 4]])')
[2016-09-20 15:00:08.331507] (42, 'Av([[1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 15:00:08.331518] (43, 'Av([[1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 2, 3]])')
[2016-09-20 15:00:08.331528] (44, 'Av([[2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1], [3, 1, 2, 4], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 15:00:08.331539] (45, 'Av([[2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 15:00:08.331550] (46, 'Av([[2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 15:00:08.331561] (47, 'Av([[2, 1, 3], [2, 3, 1], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 15:00:08.331571] (48, 'Av([[2, 1]])')
[2016-09-20 15:00:08.331582] (49, 'input permutation set')
[2016-09-20 15:00:08.331594] (50, 'point permutation set')
[2016-09-20 15:00:08.331604] (51, 'None')
[2016-09-20 15:00:08.332352] Generating rules
[2016-09-20 15:00:08.332368] Generate allowed neighbors, overlap
[2016-09-20 15:00:14.582527] Generate allowed neighbors, perm prop
[2016-09-20 15:00:40.445892] Generating point rules
[2016-09-20 15:00:40.445968] Cell (4,4)
100% [##################################################]  00:00:00
[2016-09-20 15:00:40.446564] Cell (4,3)
100% [##################################################]  00:00:00
[2016-09-20 15:00:40.447608] Cell (4,2)
100% [##################################################]  00:00:00
[2016-09-20 15:00:40.450123] Cell (4,1)
100% [##################################################]  00:00:00
[2016-09-20 15:00:40.455754] Cell (4,0)
100% [##################################################]  00:00:00
[2016-09-20 15:00:40.468216] Cell (3,4)
100% [##################################################]  00:00:00
[2016-09-20 15:00:40.487999] Cell (3,3)
100% [##################################################]  00:00:00
[2016-09-20 15:00:40.518590] Cell (3,2)
100% [##################################################]  00:00:00
[2016-09-20 15:00:40.561464] Cell (3,1)
100% [##################################################]  00:00:00
[2016-09-20 15:00:40.632353] Cell (3,0)
100% [##################################################]  00:00:00
[2016-09-20 15:00:40.722189] Cell (2,4)
100% [##################################################]  00:00:00
[2016-09-20 15:00:40.826345] Cell (2,3)
100% [##################################################]  00:00:00
[2016-09-20 15:00:40.954912] Cell (2,2)
100% [##################################################]  00:00:00
[2016-09-20 15:00:41.104204] Cell (2,1)
100% [##################################################]  00:00:00
[2016-09-20 15:00:41.306834] Cell (2,0)
100% [##################################################]  00:00:00
[2016-09-20 15:00:41.580004] Cell (1,4)
100% [##################################################]  00:00:00
[2016-09-20 15:00:41.767069] Cell (1,3)
100% [##################################################]  00:00:00
[2016-09-20 15:00:41.983203] Cell (1,2)
100% [##################################################]  00:00:00
[2016-09-20 15:00:42.234219] Cell (1,1)
100% [##################################################]  00:00:00
[2016-09-20 15:00:42.519005] Cell (1,0)
100% [##################################################]  00:00:00
[2016-09-20 15:00:42.874809] Cell (0,4)
100% [##################################################]  00:00:00
[2016-09-20 15:00:43.027889] Cell (0,3)
100% [##################################################]  00:00:00
[2016-09-20 15:00:43.184309] Cell (0,2)
100% [##################################################]  00:00:00
[2016-09-20 15:00:43.343996] Cell (0,1)
100% [##################################################]  00:00:00
[2016-09-20 15:00:43.519957] Cell (0,0)
100% [##################################################]  00:00:00
[2016-09-20 15:00:43.700986] Generating rules, 6 iterations
[2016-09-20 15:00:43.701018] Iteration 1
100% [##################################################]  00:00:01
[2016-09-20 15:00:45.586324] Iteration 2
100% [##################################################]  00:01:06
[2016-09-20 15:01:51.801731] Iteration 3
100% [##################################################]  00:04:51
[2016-09-20 15:06:42.938465] Iteration 4
100% [##################################################]  00:03:49
[2016-09-20 15:10:32.487837] Iteration 5
100% [##################################################]  00:00:29
[2016-09-20 15:11:01.914541] Iteration 6
100% [##################################################]  00:00:00
[2016-09-20 15:11:01.931550] Found 10901 rules, 3109 of which are valid, 2193 of which are distinct
[2016-09-20 15:11:01.931576] Death by overlap: 6078
[2016-09-20 15:11:01.931594] Death by perm prop: 1714
[2016-09-20 15:11:01.931602]
[2016-09-20 15:11:01.931793] Finding exact cover...
[2016-09-20 15:11:01.931869] Found:

Gurobi Optimizer version 6.5.0 build v6.5.0rc1 (mac64)
Copyright (c) 2015, Gurobi Optimization, Inc.

Read LP format model from file /var/folders/5c/0g9v9k4x76gcq3btks74_jpw0000gn/T/struct_tmp61LdHH/inp.lp
Reading time = 0.02 seconds
(null): 144 rows, 2193 columns, 40836 nonzeros
Optimize a model with 144 rows, 2193 columns and 40836 nonzeros
Coefficient statistics:
  Matrix range    [1e+00, 1e+00]
  Objective range [1e+00, 1e+00]
  Bounds range    [1e+00, 1e+00]
  RHS range       [1e+00, 1e+00]
Presolve removed 64 rows and 1841 columns
Presolve time: 0.13s
Presolved: 80 rows, 352 columns, 3757 nonzeros
Variable types: 0 continuous, 352 integer (352 binary)
Found heuristic solution: objective 17.0000000
Found heuristic solution: objective 7.0000000

Root relaxation: objective 5.000000e+00, 21 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

*    0     0               0       5.0000000    5.00000  0.00%     -    0s

Explored 0 nodes (21 simplex iterations) in 0.16 seconds
Thread count was 8 (of 8 available processors)

Optimal solution found (tolerance 1.00e-04)
Best objective 5.000000000000e+00, best bound 5.000000000000e+00, gap 0.0%

Wrote result file '/var/folders/5c/0g9v9k4x76gcq3btks74_jpw0000gn/T/struct_tmp61LdHH/out.sol'

[211, 1272, 1862, 2068, 2088]

[2016-09-20 15:11:02.256035] Index:
211:
000000000000000000000000001111110000001111000011001000100000000000000000000111100001100100010000000000000011001000100000000001000100000001000000

+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1]])
2: Av([[2, 1]])

+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
1: Av([[2, 1]])
2: Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1]])

1272:
000000000000000000000000000000000000000000000000000100000000000000000000000000000000000010000000000000000000000100000000000000100000000000000000

+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
1: Av([[2, 1]])

+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
1: Av([[2, 1]])

1862:
000000000000000000000000000000000000000000000000000010000000000000000000000000000000000001000000000000000000000010000000000000010000000000000000

+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
1: Av([[2, 1]])

+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
1: Av([[2, 1]])

2068:
111111111111111111111111110000001111110000111100110001010111111111111111111000011110011000101011111111111100110001010111111110001010111110111111

+-+
|1|
+-+
1: Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1], [4, 1, 2, 3]])

2088:
000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000100000000000000000000001000000000000001000000000000

+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
1: Av([[2, 1]])

+-+-+-+-+-+
| | | | |o|
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| |1| | | |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
1: Av([[2, 1]])

[2016-09-20 15:11:02.258051] Verifying cover [211, 1272, 1862, 2068, 2088] up to length 10
[2016-09-20 15:11:02.258076] Multiple covers, but only using one for verification
[2016-09-20 15:11:30.757052] Cover verified up to length 10
