Hennings-MacBook-Pro:classical_from_Kuszmaul ulfarsson$ python ex8/ex8_rec1_part2.py
[2016-09-20 15:21:27.474341] Generating permutations from input
[2016-09-20 15:21:28.059703] Finished in 0.585s
[2016-09-20 15:21:28.059747] Enumeration is [1, 1, 2, 5, 10, 16, 26, 42]
[2016-09-20 15:21:28.059779] Tayloring DAG
[2016-09-20 15:21:30.437949] Finished in 2.378s
[2016-09-20 15:21:30.438284] (0, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 15:21:30.438306] (1, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1]])')
[2016-09-20 15:21:30.438318] (2, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 15:21:30.438329] (3, 'Av([[1, 2, 3], [1, 3, 2], [2, 1, 3]])')
[2016-09-20 15:21:30.438340] (4, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 15:21:30.438351] (5, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 3, 1]])')
[2016-09-20 15:21:30.438361] (6, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1], [3, 1, 2]])')
[2016-09-20 15:21:30.438372] (7, 'Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1]])')
[2016-09-20 15:21:30.438382] (8, 'Av([[1, 2]])')
[2016-09-20 15:21:30.438393] (9, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 15:21:30.438403] (10, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 15:21:30.438413] (11, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 15:21:30.438424] (12, 'Av([[1, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 2, 3]])')
[2016-09-20 15:21:30.438434] (13, 'Av([[1, 3, 2], [2, 1, 3], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 15:21:30.438444] (14, 'Av([[1, 3, 2], [2, 1, 3], [3, 1, 2]])')
[2016-09-20 15:21:30.438455] (15, 'Av([[1, 3, 2], [2, 1, 3], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 15:21:30.438466] (16, 'Av([[1, 3, 2], [2, 1, 3], [4, 1, 2, 3]])')
[2016-09-20 15:21:30.438476] (17, 'Av([[1, 3, 4, 2], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1], [3, 1, 2]])')
[2016-09-20 15:21:30.438487] (18, 'Av([[1, 3, 4, 2], [2, 1, 3], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 15:21:30.438497] (19, 'Av([[1, 3, 4, 2], [2, 1, 3], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 15:21:30.438508] (20, 'Av([[1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2]])')
[2016-09-20 15:21:30.438518] (21, 'Av([[1, 4, 3, 2], [2, 1, 3], [2, 3, 1], [4, 1, 2, 3]])')
[2016-09-20 15:21:30.438528] (22, 'Av([[2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])')
[2016-09-20 15:21:30.438539] (23, 'Av([[2, 1, 3], [2, 3, 1], [3, 2, 1], [4, 1, 2, 3]])')
[2016-09-20 15:21:30.438549] (24, 'Av([[2, 1]])')
[2016-09-20 15:21:30.438559] (25, 'input permutation set')
[2016-09-20 15:21:30.438569] (26, 'point permutation set')
[2016-09-20 15:21:30.438579] (27, 'None')
[2016-09-20 15:21:30.439045] Generating rules
[2016-09-20 15:21:30.439060] Generate allowed neighbors, overlap
[2016-09-20 15:21:33.111512] Generate allowed neighbors, perm prop
[2016-09-20 15:21:40.888552] Generating point rules
[2016-09-20 15:21:40.888612] Cell (4,4)
100% [##################################################]  00:00:00
[2016-09-20 15:21:40.889229] Cell (4,3)
100% [##################################################]  00:00:00
[2016-09-20 15:21:40.890296] Cell (4,2)
100% [##################################################]  00:00:00
[2016-09-20 15:21:40.892495] Cell (4,1)
100% [##################################################]  00:00:00
[2016-09-20 15:21:40.896764] Cell (4,0)
100% [##################################################]  00:00:00
[2016-09-20 15:21:40.903560] Cell (3,4)
100% [##################################################]  00:00:00
[2016-09-20 15:21:40.914163] Cell (3,3)
100% [##################################################]  00:00:00
[2016-09-20 15:21:40.927774] Cell (3,2)
100% [##################################################]  00:00:00
[2016-09-20 15:21:40.950759] Cell (3,1)
100% [##################################################]  00:00:00
[2016-09-20 15:21:40.983895] Cell (3,0)
100% [##################################################]  00:00:00
[2016-09-20 15:21:41.032312] Cell (2,4)
100% [##################################################]  00:00:00
[2016-09-20 15:21:41.081141] Cell (2,3)
100% [##################################################]  00:00:00
[2016-09-20 15:21:41.138868] Cell (2,2)
100% [##################################################]  00:00:00
[2016-09-20 15:21:41.205107] Cell (2,1)
100% [##################################################]  00:00:00
[2016-09-20 15:21:41.294453] Cell (2,0)
100% [##################################################]  00:00:00
[2016-09-20 15:21:41.426361] Cell (1,4)
100% [##################################################]  00:00:00
[2016-09-20 15:21:41.530238] Cell (1,3)
100% [##################################################]  00:00:00
[2016-09-20 15:21:41.635176] Cell (1,2)
100% [##################################################]  00:00:00
[2016-09-20 15:21:41.765176] Cell (1,1)
100% [##################################################]  00:00:00
[2016-09-20 15:21:41.930447] Cell (1,0)
100% [##################################################]  00:00:00
[2016-09-20 15:21:42.142067] Cell (0,4)
100% [##################################################]  00:00:00
[2016-09-20 15:21:42.238009] Cell (0,3)
100% [##################################################]  00:00:00
[2016-09-20 15:21:42.336438] Cell (0,2)
100% [##################################################]  00:00:00
[2016-09-20 15:21:42.447852] Cell (0,1)
100% [##################################################]  00:00:00
[2016-09-20 15:21:42.560276] Cell (0,0)
100% [##################################################]  00:00:00
[2016-09-20 15:21:42.690405] Generating rules, 6 iterations
[2016-09-20 15:21:42.690454] Iteration 1
100% [##################################################]  00:00:00
[2016-09-20 15:21:43.537311] Iteration 2
100% [##################################################]  00:00:21
[2016-09-20 15:22:04.919079] Iteration 3
100% [##################################################]  00:00:16
[2016-09-20 15:22:21.688086] Iteration 4
100% [##################################################]  00:01:41
[2016-09-20 15:24:03.073651] Iteration 5
100% [##################################################]  00:00:14
[2016-09-20 15:24:17.635793] Iteration 6
100% [##################################################]  00:00:00
[2016-09-20 15:24:17.644772] Found 5494 rules, 1849 of which are valid, 1201 of which are distinct
[2016-09-20 15:24:17.644796] Death by overlap: 3324
[2016-09-20 15:24:17.644814] Death by perm prop: 321
[2016-09-20 15:24:17.644822]
[2016-09-20 15:24:17.644930] Finding exact cover...
[2016-09-20 15:24:17.644963] Found:

Gurobi Optimizer version 6.5.0 build v6.5.0rc1 (mac64)
Copyright (c) 2015, Gurobi Optimization, Inc.

Read LP format model from file /var/folders/5c/0g9v9k4x76gcq3btks74_jpw0000gn/T/struct_tmpn455zZ/inp.lp
Reading time = 0.01 seconds
(null): 103 rows, 1201 columns, 19200 nonzeros
Optimize a model with 103 rows, 1201 columns and 19200 nonzeros
Coefficient statistics:
  Matrix range    [1e+00, 1e+00]
  Objective range [1e+00, 1e+00]
  Bounds range    [1e+00, 1e+00]
  RHS range       [1e+00, 1e+00]
Found heuristic solution: objective 11
Presolve removed 40 rows and 953 columns
Presolve time: 0.07s
Presolved: 63 rows, 248 columns, 2433 nonzeros
Variable types: 0 continuous, 248 integer (248 binary)

Root relaxation: objective 3.000000e+00, 28 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

*    0     0               0       3.0000000    3.00000  0.00%     -    0s

Explored 0 nodes (28 simplex iterations) in 0.08 seconds
Thread count was 8 (of 8 available processors)

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0%

Wrote result file '/var/folders/5c/0g9v9k4x76gcq3btks74_jpw0000gn/T/struct_tmpn455zZ/out.sol'

[72, 319, 680]

[2016-09-20 15:24:17.806195] Index:
 72:
0000000000000000000000000000000000000001100000000000000000000000011000000000000001100000000110000000000

+-+-+-+-+
| | |o| |
+-+-+-+-+
| | | |o|
+-+-+-+-+
| | |o| |
+-+-+-+-+
| |o| | |
+-+-+-+-+
|1| | | |
+-+-+-+-+
1: Av([[2, 1]])

+-+-+-+-+
| | |o| |
+-+-+-+-+
| | | |o|
+-+-+-+-+
| | |o| |
+-+-+-+-+
| |1| | |
+-+-+-+-+
|o| | | |
+-+-+-+-+
1: Av([[2, 1]])

319:
1111111111111111111111111100000000000000001111111111111111000000000011111111110000001111110000111101111

+-+
|1|
+-+
1: Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1]])

680:
0000000000000000000000000011111111111110010000000000000000111111100100000000001110010000001001000010000

+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
|1| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
1: Av([[2, 1]])
2: Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1]])

+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| |2| | | |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
| | | | |1|
+-+-+-+-+-+
1: Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1]])
2: Av([[2, 1]])

+-+-+-+-+-+
| | | |o| |
+-+-+-+-+-+
| | |1| | |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
1: Av([[2, 1]])
2: Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1]])

+-+-+-+-+-+
| | | |1| |
+-+-+-+-+-+
| | |o| | |
+-+-+-+-+-+
| |o| | | |
+-+-+-+-+-+
|o| | | | |
+-+-+-+-+-+
| | | | |2|
+-+-+-+-+-+
1: Av([[2, 1]])
2: Av([[1, 2, 3], [1, 4, 3, 2], [2, 1, 3], [2, 4, 3, 1]])

[2016-09-20 15:24:17.807474] Verifying cover [72, 319, 680] up to length 10
[2016-09-20 15:24:17.807499] Multiple covers, but only using one for verification
[2016-09-20 15:24:26.853457] Cover verified up to length 10
