[2016-10-25 10:40:33.092865] Generating permutations from input
[2016-10-25 10:40:33.132337] Finished in 0.039s
[2016-10-25 10:40:33.132414] Enumeration is [1, 1, 2, 5, 13, 34, 89, 233]
[2016-10-25 10:40:33.132448] Tayloring DAG
[2016-10-25 10:40:33.185856] Finished in 0.053s
[2016-10-25 10:40:33.186073] (0, 'Av([[1, 2, 3], [1, 3, 2], [3, 1, 2]])')
[2016-10-25 10:40:33.186089] (1, 'Av([[1, 2, 3], [1, 3, 2]])')
[2016-10-25 10:40:33.186100] (2, 'Av([[1, 2]])')
[2016-10-25 10:40:33.186110] (3, 'Av([[1, 3, 2], [3, 1, 2]])')
[2016-10-25 10:40:33.186120] (4, 'Av([[2, 1]])')
[2016-10-25 10:40:33.186131] (5, 'input permutation set')
[2016-10-25 10:40:33.186141] (6, 'point permutation set')
[2016-10-25 10:40:33.186150] (7, 'None')
[2016-10-25 10:40:33.189088] Generating rules
[2016-10-25 10:40:33.189133] Generate allowed neighbors, perm prop
[2016-10-25 10:40:33.609095] Generating point rules
[2016-10-25 10:40:33.609145] Cell (2,2)
  0% [--------------------------------------------------] 100% [##################################################]  00:00:00
[2016-10-25 10:40:33.609643] Cell (2,1)
  0% [--------------------------------------------------] 100% [##################################################]  00:00:00
[2016-10-25 10:40:33.610241] Cell (2,0)
  0% [--------------------------------------------------] 100% [##################################################]  00:00:00
[2016-10-25 10:40:33.611500] Cell (1,2)
  0% [--------------------------------------------------] 100% [##################################################]  00:00:00
[2016-10-25 10:40:33.613379] Cell (1,1)
  0% [--------------------------------------------------] 100% [##################################################]  00:00:00
[2016-10-25 10:40:33.616703] Cell (1,0)
  0% [--------------------------------------------------] 100% [##################################################]  00:00:00
[2016-10-25 10:40:33.623149] Cell (0,2)
  0% [--------------------------------------------------] 100% [##################################################]  00:00:00
[2016-10-25 10:40:33.626779] Cell (0,1)
  0% [--------------------------------------------------] 100% [##################################################]  00:00:00
[2016-10-25 10:40:33.630607] Cell (0,0)
  0% [--------------------------------------------------] 100% [##################################################]  00:00:00
[2016-10-25 10:40:33.634826] Number of point grids: 19
[2016-10-25 10:40:33.634898] Generating rules, 4 iterations
[2016-10-25 10:40:33.634914] Iteration 1
  0% [--------------------------------------------------] 100% [##################################################]  00:00:00
[2016-10-25 10:40:33.687725] Iteration 2
  0% [--------------------------------------------------] 100% [##################################################]  00:00:00
[2016-10-25 10:40:33.877877] Iteration 3
  0% [--------------------------------------------------]  38% [###################-------------------------------]  64% [################################------------------]  80% [########################################----------] 100% [##################################################]  00:00:01
[2016-10-25 10:40:35.790225] Iteration 4
  0% [--------------------------------------------------] 100% [##################################################]  00:00:00
[2016-10-25 10:40:35.790728] Found 222 rules, 168 of which are valid, 136 of which are distinct
[2016-10-25 10:40:35.790742] Death by overlap: 38
[2016-10-25 10:40:35.790750] Death by perm prop: 16
[2016-10-25 10:40:35.790756] 
[2016-10-25 10:40:35.790783] Finding exact cover...
[2016-10-25 10:40:35.790797] Found:

Gurobi Optimizer version 6.5.0 build v6.5.0rc1 (mac64)
Copyright (c) 2015, Gurobi Optimization, Inc.

Read LP format model from file /var/folders/5c/0g9v9k4x76gcq3btks74_jpw0000gn/T/struct_tmpOpumgJ/inp.lp
Reading time = 0.00 seconds
(null): 378 rows, 136 columns, 7029 nonzeros
Optimize a model with 378 rows, 136 columns and 7029 nonzeros
Coefficient statistics:
  Matrix range    [1e+00, 1e+00]
  Objective range [1e+00, 1e+00]
  Bounds range    [1e+00, 1e+00]
  RHS range       [1e+00, 1e+00]
Found heuristic solution: objective 2
Presolve removed 378 rows and 136 columns
Presolve time: 0.01s
Presolve: All rows and columns removed

Explored 0 nodes (0 simplex iterations) in 0.01 seconds
Thread count was 1 (of 8 available processors)

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0%

Wrote result file '/var/folders/5c/0g9v9k4x76gcq3btks74_jpw0000gn/T/struct_tmpOpumgJ/out.sol'

[2016-10-25 10:40:35.839834] Index:
[2016-10-25 10:40:35.840374] Verifying cover [0, 124] up to length 10
[2016-10-25 10:40:44.409553] Cover verified up to length 10
[2016-10-25 10:40:44.410017] Cover verified
[2016-10-25 10:40:44.410067] (0, 'Av([[1, 2, 3], [1, 3, 2], [3, 1, 2]])')
[2016-10-25 10:40:44.410079] (1, 'Av([[1, 2, 3], [1, 3, 2]])')
[2016-10-25 10:40:44.410088] (2, 'Av([[1, 2]])')
[2016-10-25 10:40:44.410097] (3, 'Av([[1, 3, 2], [3, 1, 2]])')
[2016-10-25 10:40:44.410109] (4, 'Av([[2, 1]])')
[2016-10-25 10:40:44.410125] (5, 'input permutation set')
[2016-10-25 10:40:44.410140] (6, 'point permutation set')
[2016-10-25 10:40:44.410200] (7, 'None')
[0, 124]

  0: 
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001

+-+
| |
+-+

124: 
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110

+-+-+-+
| |o| |
+-+-+-+
|X| | |
+-+-+-+
| | |1|
+-+-+-+
1: Av([[1, 2, 3], [1, 3, 2]])

Next verify_bound (or 0 to stop): 